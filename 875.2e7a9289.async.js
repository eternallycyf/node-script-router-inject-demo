(self["webpackChunk"]=self["webpackChunk"]||[]).push([[875],{44875:function(n,e,t){"use strict";t.d(e,{b:function(){return o},q:function(){return r}});var o='\n// \u7b80\u5355 demo\nimport React, { useEffect, useState } from "react";\nimport { Button, Card, Table } from "antd";\nimport type { ColumnsType } from "antd/lib/table/interface";\nimport * as ExcelJs from "exceljs";\nimport {\n  generateHeaders,\n  saveWorkbook,\n  downloadExcel,\n  downloadFiles2Zip,\n  downloadFiles2ZipWithFolder,\n} from "./utils";\n\ninterface SimpleDemoProps {}\n\ninterface StudentInfo {\n  id: number;\n  name: string;\n  age: number;\n  gender: string;\n}\n\nconst SimpleDemo: React.FC<SimpleDemoProps> = () => {\n  const [list, setList] = useState<StudentInfo[]>([]);\n\n  useEffect(() => {\n    generateData();\n  }, []);\n\n  function generateData() {\n    const arr: StudentInfo[] = [];\n    for (let i = 0; i < 10; i++) {\n      arr.push({\n        id: i,\n        name: `\u5c0f\u660e${i}\u53f7`,\n        age: i,\n        gender: i % 2 === 0 ? "\u7537" : "\u5973",\n      });\n    }\n    setList(arr);\n  }\n\n  const columns: ColumnsType<any> = [\n    {\n      width: 50,\n      dataIndex: "id",\n      key: "id",\n      title: "ID",\n    },\n    {\n      width: 100,\n      dataIndex: "name",\n      key: "name",\n      title: "\u59d3\u540d",\n    },\n    {\n      width: 50,\n      dataIndex: "age",\n      key: "age",\n      title: "\u5e74\u9f84",\n    },\n    {\n      width: 80,\n      dataIndex: "gender",\n      key: "gender",\n      title: "\u6027\u522b",\n    },\n  ];\n\n  function onExportBasicExcel() {\n    // \u521b\u5efa\u5de5\u4f5c\u7c3f\n    const workbook = new ExcelJs.Workbook();\n    // \u6dfb\u52a0sheet\n    const worksheet = workbook.addWorksheet("demo sheet");\n    // \u8bbe\u7f6e sheet \u7684\u9ed8\u8ba4\u884c\u9ad8\n    worksheet.properties.defaultRowHeight = 20;\n    // \u8bbe\u7f6e\u5217\n    worksheet.columns = generateHeaders(columns);\n    // \u6dfb\u52a0\u884c\n    worksheet.addRows(list);\n    // \u5bfc\u51faexcel\n    saveWorkbook(workbook, "simple-demo.xlsx");\n  }\n\n    // \u5bfc\u51fa\n  function onExportBasicExcelWithStyle() {\n    // \u521b\u5efa\u5de5\u4f5c\u7c3f\n    const workbook = new ExcelJs.Workbook();\n    // \u6dfb\u52a0sheet\n    const worksheet = workbook.addWorksheet("demo sheet");\n    // \u8bbe\u7f6e sheet \u7684\u9ed8\u8ba4\u884c\u9ad8\n    worksheet.properties.defaultRowHeight = 20;\n    // \u8bbe\u7f6e\u5217\n    worksheet.columns = generateHeaders(columns);\n    // \u7ed9\u8868\u5934\u6dfb\u52a0\u80cc\u666f\u8272\u3002\u56e0\u4e3a\u8868\u5934\u662f\u7b2c\u4e00\u884c\uff0c\u53ef\u4ee5\u901a\u8fc7 getRow(1) \u6765\u83b7\u53d6\u8868\u5934\u8fd9\u4e00\u884c\n    const headerRow = worksheet.getRow(1);\n    // \u76f4\u63a5\u7ed9\u8fd9\u4e00\u884c\u8bbe\u7f6e\u80cc\u666f\u8272\n    // headerRow.fill = {\n    //   type: \'pattern\',\n    //   pattern: \'solid\',\n    //   fgColor: {argb: \'dff8ff\'},\n    // }\n    // \u901a\u8fc7 cell \u8bbe\u7f6e\u6837\u5f0f\uff0c\u66f4\u7cbe\u51c6\n    headerRow.eachCell((cell, colNum) => {\n      // \u8bbe\u7f6e\u80cc\u666f\u8272\n      cell.fill = {\n        type: "pattern",\n        pattern: "solid",\n        fgColor: { argb: "dff8ff" },\n      };\n      // \u8bbe\u7f6e\u5b57\u4f53\n      cell.font = {\n        bold: true,\n        italic: true,\n        size: 12,\n        name: "\u5fae\u8f6f\u96c5\u9ed1",\n        color: { argb: "ff0000" },\n      };\n      // \u8bbe\u7f6e\u5bf9\u9f50\u65b9\u5f0f\n      cell.alignment = {\n        vertical: "middle",\n        horizontal: "left",\n        wrapText: false,\n      };\n    });\n    // \u6dfb\u52a0\u884c\n    const rows = worksheet.addRows(list);\n    // \u8bbe\u7f6e\u6bcf\u884c\u7684\u6837\u5f0f\n    rows?.forEach((row) => {\n      // \u8bbe\u7f6e\u5b57\u4f53\n      row.font = {\n        size: 11,\n        name: "\u5fae\u8f6f\u96c5\u9ed1",\n      };\n      // \u8bbe\u7f6e\u5bf9\u9f50\u65b9\u5f0f\n      row.alignment = {\n        vertical: "middle",\n        horizontal: "left",\n        wrapText: false,\n      };\n    });\n    // \u5bfc\u51faexcel\n    saveWorkbook(workbook, "simple-demo.xlsx");\n  }\n  function onExportExcel() {\n    downloadExcel({\n      filename: "test",\n      sheets: [\n        {\n          sheetName: "test",\n          columns: columns,\n          dataSource: list,\n        },\n      ],\n    });\n  }\n\n  function onExportZip() {\n    downloadFiles2Zip({\n      zipName: "\u538b\u7f29\u5305",\n      files: [\n        {\n          filename: "test",\n          sheets: [\n            {\n              sheetName: "test",\n              columns: columns,\n              dataSource: list,\n            },\n            {\n              sheetName: "test2",\n              columns: columns,\n              dataSource: list,\n            },\n          ],\n        },\n        {\n          filename: "test2",\n          sheets: [\n            {\n              sheetName: "test",\n              columns: columns,\n              dataSource: list,\n            },\n          ],\n        },\n        {\n          filename: "test3",\n          sheets: [\n            {\n              sheetName: "test",\n              columns: columns,\n              dataSource: list,\n            },\n          ],\n        },\n      ],\n    });\n  }\n\n  function onExportFolderZip() {\n    downloadFiles2ZipWithFolder({\n      zipName: "\u538b\u7f29\u5305",\n      folders: [\n        {\n          folderName: "\u6587\u4ef6\u59391",\n          files: [\n            {\n              filename: "test",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n            {\n              filename: "test2",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n          ],\n        },\n        {\n          folderName: "\u6587\u4ef6\u59392",\n          files: [\n            {\n              filename: "test",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n            {\n              filename: "test2",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n          ],\n        },\n        {\n          folderName: "\u6587\u4ef6\u59392/\u6587\u4ef6\u59392-1",\n          files: [\n            {\n              filename: "test",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n            {\n              filename: "test2",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n          ],\n        },\n        {\n          folderName: "\u6587\u4ef6\u59392/\u6587\u4ef6\u59392-1/\u6587\u4ef6\u59392-1-1",\n          files: [\n            {\n              filename: "test",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n            {\n              filename: "test2",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n          ],\n        },\n        {\n          folderName: "",\n          files: [\n            {\n              filename: "test",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n                {\n                  sheetName: "test2",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n            {\n              filename: "test2",\n              sheets: [\n                {\n                  sheetName: "test",\n                  columns: columns,\n                  dataSource: list,\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    });\n  }\n  return (\n    <Card>\n      <h3>\u7b80\u5355\u8868\u683c</h3>\n      <Space>\n        <Button type={"primary"} onClick={onExportBasicExcel}>\n          \u5bfc\u51faexcel\n        </Button>\n        <Button\n          type={"primary"}\n          onClick={onExportBasicExcelWithStyle}\n        >\n          \u5bfc\u51fa\u5e26\u6837\u5f0fexcel\n        </Button>\n        <Button type={"primary"} onClick={onExportExcel}>\n          \u5c01\u88c5\u65b9\u6cd5\u5bfc\u51faexcel\n        </Button>\n        <Button type={"primary"} onClick={onExportZip}>\n          \u5bfc\u51fazip\n        </Button>\n        <Button type={"primary"} onClick={onExportFolderZip}>\n          \u5bfc\u51fa\u5206\u6587\u4ef6\u5939zip\n        </Button>\n      </Space>\n      <Table columns={columns} dataSource={list} />\n    </Card>\n  );\n};\n\nexport default SimpleDemo;\n',r='\n~~~ts\nimport type { ColumnType } from "antd/es/table/interface";\n// @ts-ignore\nimport { saveAs } from "file-saver";\nimport * as ExcelJs from "exceljs";\nimport type { Workbook, Worksheet, Row, Cell } from "exceljs";\nimport JsZip from "jszip";\n\nexport interface IDownloadFiles2Zip {\n  // \u538b\u7f29\u5305\u7684\u6587\u4ef6\u540d\n  zipName: string;\n  files: IDownloadExcel[];\n}\n\nexport interface IDownloadFiles2ZipWithFolder {\n  zipName: string;\n  folders: IFolder[];\n}\n\nexport interface IFolder {\n  folderName: string;\n  files: IDownloadExcel[];\n}\n\nexport interface IDownloadExcel {\n  filename: string;\n  sheets: ISheet[];\n}\n\nexport interface ISheet {\n  // sheet \u7684\u540d\u5b57\n  sheetName: string;\n  // \u8fd9\u4e2a sheet \u4e2d\u8868\u683c\u7684 column\uff0c\u7c7b\u578b\u540c antd \u7684 column\n  columns: ColumnType<any>[];\n  // \u8868\u683c\u7684\u6570\u636e\n  dataSource: any[];\n}\n\nexport interface ITableHeader {\n  header: string;\n  // \u7528\u4e8e\u6570\u636e\u5339\u914d\u7684 key\n  key: string;\n  // \u5217\u5bbd\n  width: number;\n  // \u7236\u7ea7\u7684 key\n  parentKey?: string;\n  children?: ITableHeader[];\n}\n\nexport interface IStyleAttr {\n  color?: string;\n  fontSize?: number;\n  horizontal?:\n    | "fill"\n    | "distributed"\n    | "justify"\n    | "center"\n    | "left"\n    | "right"\n    | "centerContinuous"\n    | undefined;\n  bold?: boolean;\n}\n\n// \u9ed8\u8ba4\u7684\u5217\u5bbd\nexport const DEFAULT_COLUMN_WIDTH = 20;\n// \u9ed8\u8ba4\u884c\u9ad8\nexport const DEFAULT_ROW_HEIGHT = 20;\n\n/**\n * \u4e0b\u8f7d\u5bfc\u51fa\u7b80\u5355\u7684\u8868\u683c\n * @param params\n */\nexport function downloadExcel(params: IDownloadExcel) {\n  console.log({ params });\n  // \u521b\u5efa\u5de5\u4f5c\u7c3f\n  const workbook = new ExcelJs.Workbook();\n  params?.sheets?.forEach((sheet) => handleEachSheet(workbook, sheet));\n  saveWorkbook(workbook, `${params.filename}.xlsx`);\n}\n\n/**\n * \u5bfc\u51fa\u591a\u4e2a\u6587\u4ef6\u4e3azip\u538b\u7f29\u5305\n */\nexport async function downloadFiles2Zip(params: IDownloadFiles2Zip) {\n  const zip = new JsZip();\n  // \u5f85\u6bcf\u4e2a\u6587\u4ef6\u90fd\u5199\u5165\u5b8c\u4e4b\u540e\u518d\u751f\u6210 zip \u6587\u4ef6\n  const promises = params?.files?.map(\n    async (param) => await handleEachFile(param, zip, ""),\n  );\n  await Promise.all(promises);\n  zip.generateAsync({ type: "blob" }).then((blob) => {\n    saveAs(blob, `${params.zipName}.zip`);\n  });\n}\n\n/**\n * \u5bfc\u51fa\u652f\u6301\u591a\u7ea7\u6587\u4ef6\u5939\u7684\u538b\u7f29\u5305\n * @param params\n */\nexport async function downloadFiles2ZipWithFolder(\n  params: IDownloadFiles2ZipWithFolder,\n) {\n  const zip = new JsZip();\n  const outPromises = params?.folders?.map(\n    async (folder) => await handleFolder(zip, folder),\n  );\n  await Promise.all(outPromises);\n  zip.generateAsync({ type: "blob" }).then((blob) => {\n    saveAs(blob, `${params.zipName}.zip`);\n  });\n}\n\nasync function handleFolder(zip: JsZip, folder: IFolder) {\n  console.log({ folder });\n  const folderPromises: Promise<any>[] = [];\n  const promises = folder?.files?.map(\n    async (param) => await handleEachFile(param, zip, folder.folderName),\n  );\n  await Promise.all([...promises, ...folderPromises]);\n}\n\nasync function handleEachFile(\n  param: IDownloadExcel,\n  zip: JsZip,\n  folderName: string,\n) {\n  // \u521b\u5efa\u5de5\u4f5c\u7c3f\n  const workbook = new ExcelJs.Workbook();\n  param?.sheets?.forEach((sheet) => handleEachSheet(workbook, sheet));\n  // \u751f\u6210 blob\n  const data = await workbook.xlsx.writeBuffer();\n  const blob = new Blob([data], { type: "" });\n  if (folderName) {\n    zip.folder(folderName)?.file(`${param.filename}.xlsx`, blob);\n  } else {\n    // \u5199\u5165 zip \u4e2d\u4e00\u4e2a\u6587\u4ef6\n    zip.file(`${param.filename}.xlsx`, blob);\n  }\n}\n\nfunction handleEachSheet(workbook: Workbook, sheet: ISheet) {\n  // \u6dfb\u52a0sheet\n  const worksheet = workbook.addWorksheet(sheet.sheetName);\n  // \u8bbe\u7f6e sheet \u7684\u9ed8\u8ba4\u884c\u9ad8\u3002\u8bbe\u7f6e\u9ed8\u8ba4\u884c\u9ad8\u8ddf\u81ea\u52a8\u6491\u5f00\u5355\u5143\u683c\u51b2\u7a81\n  // worksheet.properties.defaultRowHeight = 20;\n  // \u8bbe\u7f6e\u5217\n  worksheet.columns = generateHeaders(sheet.columns);\n  handleHeader(worksheet);\n  // handleData(worksheet, sheet);\n  handleDataWithRender(worksheet, sheet);\n}\n\nexport function handleHeader(worksheet: Worksheet) {\n  // \u7ed9\u8868\u5934\u6dfb\u52a0\u80cc\u666f\u8272\u3002\u56e0\u4e3a\u8868\u5934\u662f\u7b2c\u4e00\u884c\uff0c\u53ef\u4ee5\u901a\u8fc7 getRow(1) \u6765\u83b7\u53d6\u8868\u5934\u8fd9\u4e00\u884c\n  const headerRow = worksheet.getRow(1);\n  headerRow.height = 22;\n  // \u901a\u8fc7 cell \u8bbe\u7f6e\u6837\u5f0f\uff0c\u66f4\u7cbe\u51c6\n  headerRow.eachCell((cell) =>\n    addCellStyle(cell, { color: "dff8ff", fontSize: 12, horizontal: "left" }),\n  );\n}\n\nexport function handleData(worksheet: Worksheet, sheet: ISheet) {\n  // \u6dfb\u52a0\u884c\n  const rows = worksheet.addRows(sheet?.dataSource);\n  // \u8bbe\u7f6e\u6bcf\u884c\u7684\u6837\u5f0f\n  addStyleToData(rows);\n}\n\n/**\n * \u5982\u679c column \u6709 render \u51fd\u6570\uff0c\u5219\u4ee5 render \u6e32\u67d3\u7684\u7ed3\u679c\u663e\u793a\n * @param worksheet\n * @param sheet\n */\nfunction handleDataWithRender(worksheet: Worksheet, sheet: ISheet) {\n  const { dataSource, columns } = sheet;\n  const rowsData = dataSource?.map((data) => {\n    return columns?.map((column) => {\n      // @ts-ignore\n      const renderResult = column?.render?.(data[column.dataIndex], data);\n      if (renderResult) {\n        // \u5982\u679c\u4e0d\u662f object \u8bf4\u660e\u6ca1\u5305\u88f9\u6807\u7b7e\uff0c\u662f\u57fa\u672c\u7c7b\u578b\u76f4\u63a5\u8fd4\u56de\n        if (typeof renderResult !== "object") {\n          return renderResult;\n        }\n        // \u5982\u679c\u662f object \u8bf4\u660e\u5305\u88f9\u4e86\u6807\u7b7e\uff0c\u9010\u7ea7\u53d6\u51fa\u503c\n        return getValueFromRender(renderResult);\n      }\n      // @ts-ignore\n      return data[column.dataIndex];\n    });\n  });\n  console.log({ rowsData });\n  // \u6dfb\u52a0\u884c\n  const rows = worksheet.addRows(rowsData);\n  // \u8bbe\u7f6e\u6bcf\u884c\u7684\u6837\u5f0f\n  addStyleToData(rows);\n}\n\n// \u9012\u5f52\u53d6\u51fa render \u91cc\u7684\u503c\n// @ts-ignore\nfunction getValueFromRender(renderResult: any) {\n  if (renderResult?.type) {\n    const children = renderResult?.props?.children;\n    if (children?.type) {\n      return getValueFromRender(children);\n    } else {\n      return children;\n    }\n  }\n  return "";\n}\n\nfunction addStyleToData(rows: Row[]) {\n  // \u8bbe\u7f6e\u6bcf\u884c\u7684\u6837\u5f0f\n  rows?.forEach((row) => {\n    // \u8bbe\u7f6e\u5b57\u4f53\n    // eslint-disable-next-line no-param-reassign\n    row.font = {\n      size: 11,\n      name: "\u5fae\u8f6f\u96c5\u9ed1",\n    };\n    // \u8bbe\u7f6e\u5bf9\u9f50\u65b9\u5f0f\n    // eslint-disable-next-line no-param-reassign\n    row.alignment = {\n      vertical: "middle",\n      horizontal: "left",\n      wrapText: true,\n    };\n  });\n}\n\nexport function saveWorkbook(workbook: Workbook, fileName: string) {\n  // \u5bfc\u51fa\u6587\u4ef6\n  workbook.xlsx.writeBuffer().then((data: any) => {\n    const blob = new Blob([data], { type: "" });\n    saveAs(blob, fileName);\n  });\n}\n\n// \u6839\u636e antd \u7684 column \u751f\u6210 exceljs \u7684 column\nexport function generateHeaders(columns: any[]) {\n  return columns?.map((col) => {\n    const obj: ITableHeader = {\n      // \u663e\u793a\u7684 name\n      header: col.title,\n      // \u7528\u4e8e\u6570\u636e\u5339\u914d\u7684 key\n      key: col.dataIndex,\n      // \u5217\u5bbd\n      width:\n        col.width / 5 > DEFAULT_COLUMN_WIDTH\n          ? col.width / 5\n          : DEFAULT_COLUMN_WIDTH,\n    };\n    if (col.children) {\n      obj.children = col.children?.map((item: any) => ({\n        key: item.dataIndex,\n        header: item.title,\n        width: item.width,\n        parentKey: col.dataIndex,\n      }));\n    }\n    return obj;\n  });\n}\n\nexport function getColumnNumber(width: number) {\n  // \u9700\u8981\u7684\u5217\u6570\uff0c\u5411\u4e0a\u53d6\u6574\n  return Math.ceil(width / DEFAULT_COLUMN_WIDTH);\n}\n\nexport function addCellStyle(cell: Cell, attr?: IStyleAttr) {\n  const { color, fontSize, horizontal, bold } = attr || {};\n  // eslint-disable-next-line no-param-reassign\n  cell.fill = {\n    type: "pattern",\n    pattern: "solid",\n    fgColor: { argb: color },\n  };\n  // eslint-disable-next-line no-param-reassign\n  cell.font = {\n    bold: bold ?? true,\n    size: fontSize ?? 11,\n    name: "\u5fae\u8f6f\u96c5\u9ed1",\n  };\n  // eslint-disable-next-line no-param-reassign\n  cell.alignment = {\n    vertical: "middle",\n    wrapText: true,\n    horizontal: horizontal ?? "left",\n  };\n}\n\nexport function addHeaderStyle(row: Row, attr?: IStyleAttr) {\n  // eslint-disable-next-line no-param-reassign\n  row.height = DEFAULT_ROW_HEIGHT;\n  row.eachCell((cell) => addCellStyle(cell, attr));\n}\n\n// \u5408\u5e76\u884c\u548c\u5217\uff0c\u7528\u4e8e\u5904\u7406\u8868\u5934\u5408\u5e76\nexport function mergeColumnCell(\n  headers: ITableHeader[],\n  rowHeader1: Row,\n  rowHeader2: Row,\n  nameRow1: string[],\n  nameRow2: string[],\n  worksheet: Worksheet,\n) {\n  // \u5f53\u524d index \u7684\u6307\u9488\n  let pointer = -1;\n  nameRow1.forEach((name, index) => {\n    // \u5f53 index \u5c0f\u4e8e\u6307\u9488\u65f6\uff0c\u8bf4\u660e\u8fd9\u4e00\u5217\u5df2\u7ecf\u88ab\u5408\u5e76\u8fc7\u4e86\uff0c\u4e0d\u80fd\u518d\u5408\u5e76\n    if (index <= pointer) return;\n    // \u662f\u5426\u5e94\u8be5\u5217\u5408\u5e76\n    const shouldVerticalMerge = name === nameRow2[index];\n    // \u662f\u5426\u5e94\u8be5\u884c\u5408\u5e76\n    const shouldHorizontalMerge = index !== nameRow1.lastIndexOf(name);\n    pointer = nameRow1.lastIndexOf(name);\n    if (shouldVerticalMerge && shouldHorizontalMerge) {\n      // \u4e24\u4e2a\u65b9\u5411\u90fd\u5408\u5e76\n      worksheet.mergeCells(\n        Number(rowHeader1.number),\n        index + 1,\n        Number(rowHeader2.number),\n        nameRow1.lastIndexOf(name) + 1,\n      );\n    } else if (shouldVerticalMerge && !shouldHorizontalMerge) {\n      // \u53ea\u5728\u5782\u76f4\u65b9\u5411\u4e0a\u540c\u4e00\u5217\u7684\u4e24\u884c\u5408\u5e76\n      worksheet.mergeCells(\n        Number(rowHeader1.number),\n        index + 1,\n        Number(rowHeader2.number),\n        index + 1,\n      );\n    } else if (!shouldVerticalMerge && shouldHorizontalMerge) {\n      // \u53ea\u6709\u6c34\u5e73\u65b9\u5411\u540c\u4e00\u884c\u7684\u591a\u5217\u5408\u5e76\n      worksheet.mergeCells(\n        Number(rowHeader1.number),\n        index + 1,\n        Number(rowHeader1.number),\n        nameRow1.lastIndexOf(name) + 1,\n      );\n      // eslint-disable-next-line no-param-reassign\n      const cell = rowHeader1.getCell(index + 1);\n      cell.alignment = { vertical: "middle", horizontal: "center" };\n    }\n  });\n}\n\n// \u884c\u5408\u5e76\u5355\u5143\u683c\nexport function mergeRowCell(\n  headers: ITableHeader[],\n  row: Row,\n  worksheet: Worksheet,\n) {\n  // \u5f53\u524d\u5217\u7684\u7d22\u5f15\n  let colIndex = 1;\n  headers.forEach((header) => {\n    const { width, children } = header;\n    if (children) {\n      children.forEach(() => {\n        colIndex += 1;\n      });\n    } else {\n      // \u9700\u8981\u7684\u5217\u6570\uff0c\u5411\u4e0a\u53d6\u6574\n      const colNum = getColumnNumber(width);\n      // \u5982\u679c colNum > 1 \u8bf4\u660e\u9700\u8981\u5408\u5e76\n      if (colNum > 1) {\n        worksheet.mergeCells(\n          Number(row.number),\n          colIndex,\n          Number(row.number),\n          colIndex + colNum - 1,\n        );\n      }\n      colIndex += colNum;\n    }\n  });\n}\n~~~\n'}}]);